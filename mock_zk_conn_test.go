// Code generated by MockGen. DO NOT EDIT.
// Source: zk_conn.go

// Package mocks is a generated GoMock package.
package zk

import (
	reflect "reflect"

	zk "github.com/go-zookeeper/zk"
	gomock "github.com/golang/mock/gomock"
)

// MockzkConn is a mock of zkConn interface.
type MockzkConn struct {
	ctrl     *gomock.Controller
	recorder *MockzkConnMockRecorder
}

// MockzkConnMockRecorder is the mock recorder for MockzkConn.
type MockzkConnMockRecorder struct {
	mock *MockzkConn
}

// NewMockzkConn creates a new mock instance.
func NewMockzkConn(ctrl *gomock.Controller) *MockzkConn {
	mock := &MockzkConn{ctrl: ctrl}
	mock.recorder = &MockzkConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockzkConn) EXPECT() *MockzkConnMockRecorder {
	return m.recorder
}

// AddAuth mocks base method.
func (m *MockzkConn) AddAuth(scheme string, auth []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuth", scheme, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuth indicates an expected call of AddAuth.
func (mr *MockzkConnMockRecorder) AddAuth(scheme, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuth", reflect.TypeOf((*MockzkConn)(nil).AddAuth), scheme, auth)
}

// Children mocks base method.
func (m *MockzkConn) Children(path string) ([]string, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Children", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Children indicates an expected call of Children.
func (mr *MockzkConnMockRecorder) Children(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockzkConn)(nil).Children), path)
}

// ChildrenW mocks base method.
func (m *MockzkConn) ChildrenW(path string) ([]string, *zk.Stat, <-chan zk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChildrenW", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(<-chan zk.Event)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ChildrenW indicates an expected call of ChildrenW.
func (mr *MockzkConnMockRecorder) ChildrenW(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildrenW", reflect.TypeOf((*MockzkConn)(nil).ChildrenW), path)
}

// Close mocks base method.
func (m *MockzkConn) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockzkConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockzkConn)(nil).Close))
}

// Create mocks base method.
func (m *MockzkConn) Create(path string, data []byte, flags int32, acl []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, data, flags, acl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockzkConnMockRecorder) Create(path, data, flags, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockzkConn)(nil).Create), path, data, flags, acl)
}

// CreateProtectedEphemeralSequential mocks base method.
func (m *MockzkConn) CreateProtectedEphemeralSequential(path string, data []byte, acl []zk.ACL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectedEphemeralSequential", path, data, acl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectedEphemeralSequential indicates an expected call of CreateProtectedEphemeralSequential.
func (mr *MockzkConnMockRecorder) CreateProtectedEphemeralSequential(path, data, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectedEphemeralSequential", reflect.TypeOf((*MockzkConn)(nil).CreateProtectedEphemeralSequential), path, data, acl)
}

// Delete mocks base method.
func (m *MockzkConn) Delete(path string, version int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockzkConnMockRecorder) Delete(path, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockzkConn)(nil).Delete), path, version)
}

// Exists mocks base method.
func (m *MockzkConn) Exists(path string) (bool, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists.
func (mr *MockzkConnMockRecorder) Exists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockzkConn)(nil).Exists), path)
}

// Get mocks base method.
func (m *MockzkConn) Get(path string) ([]byte, *zk.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*zk.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockzkConnMockRecorder) Get(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockzkConn)(nil).Get), path)
}

// AddAuthForAnyInput means AddAuth(gomock.Any(), gomock.Any())
func (self *MockzkConnMockRecorder) AddAuthForAnyInput() *gomock.Call {
	return self.AddAuth(gomock.Any(), gomock.Any())
}

// ExistsForAnyInput means Exists(gomock.Any())
func (self *MockzkConnMockRecorder) ExistsForAnyInput() *gomock.Call {
	return self.Exists(gomock.Any())
}

// CreateForAnyInput means Create(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())
func (self *MockzkConnMockRecorder) CreateForAnyInput() *gomock.Call {
	return self.Create(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any())
}

// DeleteForAnyInput means Delete(gomock.Any(), gomock.Any())
func (self *MockzkConnMockRecorder) DeleteForAnyInput() *gomock.Call {
	return self.Delete(gomock.Any(), gomock.Any())
}

// GetForAnyInput means Get(gomock.Any())
func (self *MockzkConnMockRecorder) GetForAnyInput() *gomock.Call {
	return self.Get(gomock.Any())
}

// ChildrenForAnyInput means Children(gomock.Any())
func (self *MockzkConnMockRecorder) ChildrenForAnyInput() *gomock.Call {
	return self.Children(gomock.Any())
}

// ChildrenWForAnyInput means ChildrenW(gomock.Any())
func (self *MockzkConnMockRecorder) ChildrenWForAnyInput() *gomock.Call {
	return self.ChildrenW(gomock.Any())
}

// CreateProtectedEphemeralSequentialForAnyInput means CreateProtectedEphemeralSequential(gomock.Any(), gomock.Any(), gomock.Any())
func (self *MockzkConnMockRecorder) CreateProtectedEphemeralSequentialForAnyInput() *gomock.Call {
	return self.CreateProtectedEphemeralSequential(gomock.Any(), gomock.Any(), gomock.Any())
}
